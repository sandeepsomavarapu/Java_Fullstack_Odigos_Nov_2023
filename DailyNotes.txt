


Java Fullstack:
================

		corejava 
		database(MYSQl)
		jdbc
		servlet
		jsp
		spring 
		springboot
		jpa
		hibernate
		microservices

	html,css,js,bs,ts,angular


Language:
=========
		communication with human

Programming Language:
======================
		communication with machine


software

		c,c++,java,python,.net.php,......
		

			POP							OOP	
C,BCPL,B,COBOL,PHOTON,....			C++,java,python,.net,php.....

		functions
	pointers		Performance		Inehritance,Polymorphisam
					Security		encapsulation,abstraction
				


why java?

	1)platform independent  
	2)garbage collection -->garbage collector  c,c++

				1995,1996 ,
				sun micro system-->oracle corporation
				JDK 1.0
				
				21
	james gosling

			machine1		java app		WORA
			sandeep			.net microsoft
			windows11
			

machine2	  	machine3
charan			varsha
linux			mac

			
			
				python-->1993--->simple



Java Installation


welcome to java

				Welcome.java
javac filename.java -->compailation-->compailer
java classname---->execution-->jvm

53--keywords--->lowercase

.java

user understable language 


Identifiers:
=============

any name in java will call it as identifier 


	Welcome@123

		a-z
		A-Z
		0-9
		$
		_
Variables:
===========
		variable is a name of memory location
		
		
		reusability
		
		
	syntax:
	  datatype varname=value
		
		
		
		
		PDT    				NPDT
		
	   8						String,Array....	
		
	byte	1 byte		-128 to 127
	short	2			-32768 to 32767
	int		4			-2147483648 to 2147483647
	long	8			-2 power 63 to (2 power 63 )- 1
	
	float	4			23.549802347923f	 5 to 6
	double	8								14 to 15
		
	char	2			''
	boolean 1 bit 		true,false
		
		
				byte age 1
				long age 8  
		
		
		english
		18 
		
		
		2 types 
		local variables :inside the method 
		
		global variables :outside the method with in the class

				instance and static 


	
instance and static difference :
=============================== 


		local and global

	syntax:
	======
			static int countryCode=91 //static 4 bytes 
					int eid=123;
					
					javac filename.java  compiler 
					java classname			JDK-->JRE-->JVM-->
	memory:
	======
		static variables will get memory only once at the time of class loading into JVM
		instance variables will get memory for every object creation
	
			class A
			
			
			classname objname=new classname();
			A a=new A();
	
	Access:
	======
			static variables can be accessable by using classname 
			instance variables can be accessable by using objref 
	
	Usage:
	=======
			for common data will  go with static 
									countryname,countryCode,orgName,schoolName....
			for unique data will go with instance 
			
									eid,contact,aadhar,pan,account,.....


Flow control:
================




JVM Architecutre:
==================


			execution flow
			javac filename.java					java classname
	.java --------------------------->	.class	-------------------->output
			compiler--->compailation			JVM--->execution



			JVM
			
				3 parts 
				
				
								CLSS(class loader syb system)
								
								
								memory areas
								
								5 MA
								
								execution engine


		local variables			how much DT   when	where 
		instance 
		static 



package -->folder
		pre defined --->java.lang default package 
		user defined -->package 

		


	public static void main(String[] args) {

	}

methods 

						methodname/variable name-->camelcase
						class name -->pascalcase
syntax:
		accessmodifier static/instance returntype methodname 


	reusability


		

Arrays:
==========


		datatype varname=value;


			int marks = 123; 

				marks=	99;

 to store group values -->arrays
 
 
	int marks[]={12,23,43,55,63,533,53,99,89};//array literal
	
	index-->0,1,2,3,4,5,6,7,8
 
 
	int marks[]=new int[9];//AIOE
 
 
 
 
					Performance		Inheritance,Polymorphisam
					Security		encapsulation,abstraction
 
 
 Inheritance:
 ============ Single,multi level,hirarchie,multiple 
 
	its a process of aquiring the features from one class to another class.
 
 
 
		CODE Reusability:
		
		
		extends ,implements


	class X
	{
	
	//1000 methods
	
	}
	class Y extends X
	{

	//20 methods

	}




	interface X
	{
	
	//1000 methods
	
	}
	class Y implements X
	{

	//20 methods

	}

NOTE:
=======

	1) BY DEFAULT PACKAGE FOR EVERY JAVA FILE  java.lang
	
	2) BY DEFAULT PARENT CLASS FOR EVERY JAVA CLASS IS java.lang.Object--11



Methods


	public static void main(String[] args) {

	}
	public void add(int a, int b) {
		System.out.println("add of two numbers : " + (a + b));
	}

	public void sub(int a, int b) {
		System.out.println("sub of two numbers : " + (a - b));
	}



abstract  and concrete 

		
		concrete method/non-abstract:
		
		a method  with body/implementation

		abstract method:
		
		a method  with out body/implementation



	public abstract void mul(int a, int b) ;

abstraction:


	abstract classes :0-100%
	
	interface 			100%




class			:its collection of only conrete methods

abstract class	:its a combination both concrete and abstract methods 

interfaces		:its a collection only abstract methods 


we cannot create object for abstract class  and interface


multiple Inheritance:
=======	===========


			many parents and one child


MI not supported by java through classes
MI  supported by java through interfaces`
				


interface A					interface B
{						{
	m1();					m1();


}						}



class C implements A,B
{

C 	c=new C();
	c.m1();
	
	
	
	m1()
	{
	
	
	}
}

String,stringbuffer,stringbuilder   java.lang



		to represent group/collection of characters 



			"welcome to india"


String:imuttable
StringBuffer				synchronized		
StringBuilder:	muttable  not synchronized		


		public void m1()
		{
		
		}


		public synchronized void m2()
		{
		
		}


	String name="odigos";//imuttable

JDK,JVM,JRE--->heap,method,stack


package com.odigos.oops;

public class StringExample {
	public static void main(String[] args) {
		// Immutable
		String name = "odigos";// literal -->heap--->SCP--->duplicates are not allowed
		String name1 = "odigos";
		String name2 = "Odigos";
		System.out.println(name.equals(name1));// value comparison true
		System.out.println(name1 == name2);// false
		System.out.println(name2.equals(name1));// value comparison false
		System.out.println(name2.equalsIgnoreCase(name1));// value comparison true
		System.out.println(name.compareTo(name1));// 0
		System.out.println("adigos".compareTo("aeigos"));// 97 98 -1
		System.out.println("odigos".compareToIgnoreCase("Odigos"));// 97 98 -1 A-65
		System.out.println("odigos".codePointAt(1));// ,a-97 A-65
		System.out.println("adigos".codePointBefore(1));// ,a-97
		System.out.println("odigos kakinada".toUpperCase());
		System.out.println("odigos kakinada".charAt(4));
		System.out.println("welcome to india".length());
		System.out.println("odigods".indexOf('d'));
		System.out.println("odigods".lastIndexOf('d'));
//		compareTo 
//		--return -ve if obj1 has to come before obj2
//		--return +ve if obj1 has to come after obj2
//		-- return 0 if obj1 & obj2 are equal.
//		System.out.println(name.concat(" kakinada"));// odigos kakinada--GC
//		System.out.println(name);
//		StringBuilder sb = new StringBuilder("kakinada");// mutable
//		sb.append(" india");
//		System.out.println(sb);

	}
}












		scanner
		
			username
			password
			
			
			username is odigos password odigoskakinada
			
				login sucess
			
			enter valid credentials throw InvalidCredential
			


public -->every where
default-->package level scope
private-->class level  scope
protected-->inside the package every where and outside the package only when ever it is child





Polymorphisam:
==============

		poly-->many
		morphisam-->forms 

		
		method overloading 
		
					method name is same signature is different 
					
										no of params 
										order of params
										type of params
					
		
		method overriding 

					method name is same implementation is different



	final 
	
		before the variable
		before the method
		before the class
	

constructor:
===============

	constructor is a special member functions
	
		which is used to intialise the object 
	
	constructor name must be classname 
	constructor never return 

class A
{

				A obj=new A();
}


		classname objname=new classname();
		classname objname=new constructor();
		
		
		
	to represent current class properties will use this keyword	
								variable,method,constructor,object
	to represent parent class properties will use super keyword	
								variable,method,constructor		



	inheritance,			abstraction,				polymorphisam,				encapsulation
	extends,implements, abstract class and interface, methodoverloading,method overriding,




public class Employee
{
private int	empid;
private String	empname;
private float	empsal;
private String	empadd;
	
	
	data must be private 
	methods must be public 
	
	//setters and getters 

} 


class Test 
{
Employee emp=new Employee();

}


String,StrinBuffer,StringBuilder -->java.lang



String is imuutable (fixed) literal,new SCP(duplicates are not allowed )
StrinBuffer is muttable and synchronized
StrinBuilder is muttable and not-synchronized


		public synchronized StringBuffer append(){
		
		
		}

		public  StringBuffer append(){
		
		
		}


		Assignments 
			package					
			naming conventions			
			bestpractices
			comments

	Arrays Assignment.docx  
	Assignment Day-3.txt   
	Core java Basics Task.docx  
	Flow Control Exercises.docx
	String tasks.docx


Mock Interview :
		variables
		datatypes
		instance static 
		oops
		string,stringbuffer,stringbuilder

		video mandatory

Exception Handling:
===================


		two problems 
		
		1)system defined error messages
		
		2)abnormal termination




		two Advantagses 
		
		1)user friendly  error messages
		
		2)normal termination



Exception handling is a mechanisam which is used to convert system defined error messages into user friendly error msgs


		try,catch,finally,throw,throws


	error 
	
	compile time error   	error
	runtime error			exception

													Object 
													  |		
													 \ /
												  Throwable
	
						synchronous						asynchronous

				hardware
		java.lang.Error




try catch finally	


throw :to throw an exception explicitly 

throws 



		age 
			<18 
				throw  new AgeNotValidException("YOU are not allowed to vote ...")



user defined exception


	1)create a class make that as child to anyone of the parent exception classes(Throwable/Exception/RuntimeException)
	2)create parameterized constructor
		

		scanner
		
			username
			password
			
			
			username is odigos password odigoskakinada
			
				login sucess
			
			enter valid credentials throw InvalidCredential
			
File IO:
=======
		java.io

import

	empname empsal names 
	
	
	create a file 
			File 

	write the data into file 

	read the data from file



	1)registration			username,password -->write -->file
	2)login					username,password -->read -->file-->throw invalid credentials 
	

	collections :
	============
	
		variables:
		==========
			int eid=123;
			int eids[]={123,23,5,6,3,89,22,35};
			sop(eids[9])AIOE
	
			index ->0,1,2,3,4,5,6,7,8,9
	
	
			1)arrays can hold/store only homogeneous/similar data 
	
			2)arrays are fixed in size not growable in nature 
	
			3)no utility methods
	
	
		COllections:
		============
	
			1)collections can hold/store  homogeneous/similar and heterogeneous data 
	
			2)collection are not fixed in size , growable in nature  -->AL-->10-->16-->25 (cc*3/2)+1
	
			3)lots of utility methods
	
	
		LIST:-
	
		1)duplicates are allowed
		2)insertion order followed/preserved 
		
			AL,LL,Vector,Stack
	
	
	
	multi threading :
	==================







	
			
